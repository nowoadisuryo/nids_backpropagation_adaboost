/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Dataset;

import Learning.Backpropagation;
import Main.Home;
import com.opencsv.CSVReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author INTEL&AMD
 */
public class Preprocessing extends javax.swing.JFrame {

    /**
     * Creates new form Preprocessing
     */
    public Preprocessing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        TxtRaw = new javax.swing.JTextField();
        BtnRaw = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        TxtCsv = new javax.swing.JTextField();
        BtnCsv = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        TxtTotRow = new javax.swing.JTextField();
        BtnRun = new javax.swing.JButton();
        BtnBck = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblRawDataset = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        TblFinalDataset = new javax.swing.JTable();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TblEncodingService = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TblEncodingFlag = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TblNormalization = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Feature Extraction");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Preprocessing");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(522, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(522, 522, 522))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(20, 20, 20))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuration"));
        jPanel1.setToolTipText("");
        jPanel1.setName(""); // NOI18N

        jLabel2.setText("Path to Raw Dataset");

        BtnRaw.setText("Browse...");
        BtnRaw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnRawMouseClicked(evt);
            }
        });
        BtnRaw.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BtnRawKeyReleased(evt);
            }
        });

        jLabel7.setText("Directory to Save CSV File");

        BtnCsv.setText("Browse...");
        BtnCsv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnCsvMouseClicked(evt);
            }
        });

        jLabel4.setText("Total Row (1 - 2000)");

        TxtTotRow.setText("2000");

        BtnRun.setText("Run");
        BtnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnRunMouseClicked(evt);
            }
        });

        BtnBck.setText("Back");
        BtnBck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnBckMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TxtCsv, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TxtRaw, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnRaw)
                            .addComponent(BtnCsv)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(BtnRun, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(BtnBck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(TxtTotRow, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtRaw, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnRaw))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtCsv, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnCsv))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtTotRow, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnRun)
                    .addComponent(BtnBck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        TblRawDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TblRawDataset);

        jTabbedPane1.addTab("Raw Dataset", jScrollPane1);

        TblFinalDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(TblFinalDataset);

        jTabbedPane1.addTab("Final Dataset", jScrollPane5);

        TblEncodingService.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TblEncodingService);

        jTabbedPane2.addTab("Service", jScrollPane2);

        TblEncodingFlag.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TblEncodingFlag);

        jTabbedPane2.addTab("Flag", jScrollPane3);

        jTabbedPane1.addTab("Encoding", jTabbedPane2);

        TblNormalization.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(TblNormalization);

        jTabbedPane1.addTab("Z-Score Normalization", jScrollPane4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 240, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnRunMouseClicked
        try {
            DataConverterPhase1(dir[0], fileName);
            GetMaxSample();
            GetArray(dir, fileName);
            Encoding(dir, fileName);
            DataConverterPhase2(dir, fileName);
            ShowRawDataset(dir);
            ShowEncodingService(x2);
            ShowEncodingFlag(x14);
            ShowZscoreNormalization(x1, x2, x3, x4, x5, x9, x10, x14);
            JOptionPane.showMessageDialog(null, "Done!");
            feedInput(InputNeuron + 1, dir[1] + "\\" + stripExtension(fileName) + ".csv");
            ShowFinalDataset();
        } catch (IOException ex) {
            Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BtnRunMouseClicked

    private void BtnCsvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnCsvMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        String choosertitle = null;
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            TxtCsv.setText(chooser.getSelectedFile().toString());
            dir[1] = chooser.getSelectedFile().toString();
        } else {
            TxtCsv.setText("No directory selected.");
        }
    }//GEN-LAST:event_BtnCsvMouseClicked

    private void BtnRawKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BtnRawKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnRawKeyReleased

    private void BtnRawMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnRawMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        String choosertitle = null;
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setFileFilter(filter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            TxtRaw.setText(chooser.getSelectedFile().toString());
            fileName = chooser.getSelectedFile().getName();
            dir[0] = chooser.getCurrentDirectory().toString();
        } else {
            TxtRaw.setText("No file selected.");
        }
    }//GEN-LAST:event_BtnRawMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void BtnBckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnBckMouseClicked
        // TODO add your handling code here:
        Home frame = new Home();
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_BtnBckMouseClicked
    String fileName;
    String[] dir = new String[2];
    public int totBaris;
    int InputNeuron = 15;
    private static double trainInputs[][] = new double[10000][14];
    private static int trainOutput[] = new int[10000];

    void ShowRawDataset(String[] Directory) {
        try {
            DefaultTableModel model;
            model = new DefaultTableModel();
            TblRawDataset.setModel(model);
            String[] columns = new String[]{
                "No", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10",
                "x11", "x12", "x13", "x14", "label"
            };
            for (int i = 0; i < columns.length; i++) {
                model.addColumn(columns[i]);
            }
            CSVReader reader = new CSVReader(new FileReader(Directory[0].replace("\\", "/") + "/dump.csv"));
            String[] nextLine;
            String tampung = null;
            int i = 1;
            Object[][] data = new Object[MaxSample + 1][InputNeuron + 1];
            try {
                while ((nextLine = reader.readNext()) != null) {
                    data[i][0] = i;
                    for (int j = 0; j < InputNeuron - 1; j++) {
                        data[i][j + 1] = nextLine[j];
                    }
                    switch (nextLine[17]) {
                        case "1":
                            data[i][InputNeuron] = "normal";
                            break;
                        case "-1":
                            data[i][InputNeuron] = "serangan";
                            break;
                        case "-2":
                            data[i][InputNeuron] = "serangan";
                            break;
                        default:
                            data[i][InputNeuron] = "null";
                            break;
                    }
                    model.addRow(data[i]);
                    i++;
                }
            } catch (IOException ex) {
                Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void ShowFinalDataset() throws IOException {
        //headers for the table

        DefaultTableModel model;
        model = new DefaultTableModel();
        TblFinalDataset.setModel(model);
        String[] columns = new String[]{
            "No", "x[1]", "x[2]", "x[3]", "x[4]", "x[5]",
            "x[6]", "x[7]",
            "x[8]", "x[9]", "x[10]",
            "x[11]", "x[12]",
            "x[13]", "x[14]", "y"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }
        //actual data for the table in a 2d array
        Object[] data = new Object[InputNeuron + 1];
        for (int i = 0; i < MaxSample; i++) {
            data[0] = i + 1;
            for (int j = 0; j < InputNeuron - 1; j++) {
                data[j + 1] = trainInputs[i][j];
            }
            data[InputNeuron] = trainOutput[i];
            model.addRow(data);
        }
    }

    void ShowEncodingService(double[] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        TblEncodingService.setModel(model);
        String[] columns = new String[]{
            "No", "x[2]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }
        //actual data for the table in a 2d array
        Object[] data = new Object[InputNeuron + 1];
        for (int i = 0; i < MaxSample; i++) {
            data[0] = i + 1;
            data[1] = vector[i];
            model.addRow(data);
        }
    }

    void ShowEncodingFlag(double[] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        TblEncodingFlag.setModel(model);
        String[] columns = new String[]{
            "No", "x[14]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }
        //actual data for the table in a 2d array
        Object[] data = new Object[InputNeuron + 1];
        for (int i = 0; i < MaxSample; i++) {
            data[0] = i + 1;
            data[1] = vector[i];
            model.addRow(data);
        }
    }

    void ShowZscoreNormalization(double[] vector, double[] vector1, double[] vector2,
            double[] vector3, double[] vector4, double[] vector5, double[] vector6,
            double[] vector7) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        TblNormalization.setModel(model);
        String[] columns = new String[]{
            "No", "x[1]", "x[2]", "x[3]", "x[4]", "x[5]", "x[9]", "x[10]"
                , "x[14]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }
        //actual data for the table in a 2d array
        Object[] data = new Object[InputNeuron + 1];
        for (int i = 0; i < MaxSample; i++) {
            data[0] = i + 1;
            data[1] = GetZscore(vector[i], vector);
            data[2] = GetZscore(vector1[i], vector1);
            data[3] = GetZscore(vector2[i], vector2);
            data[4] = GetZscore(vector3[i], vector3);
            data[5] = GetZscore(vector4[i], vector4);
            data[6] = GetZscore(vector5[i], vector5);
            data[7] = GetZscore(vector6[i], vector6);
            data[8] = GetZscore(vector7[i], vector7);
            model.addRow(data);
        }
    }

    static String stripExtension(String str) {
        // Handle null case specially.
        if (str == null) {
            return null;
        }
        // Get position of last '.'.
        int pos = str.lastIndexOf(".");
        // If there wasn't any '.' just return the string as is.
        if (pos == -1) {
            return str;
        }
        // Otherwise return the string, up to the dot.
        return str.substring(0, pos);
    }

    void GetArray(String[] Directory, String Filename) {
        try {
            String FILENAME = (Directory[1] + "\\" + stripExtension(Filename) + ".csv").replace("\\", "/");
            CSVReader reader = new CSVReader(new FileReader(Directory[0].replace("\\", "/") + "/dump.csv"));
            String[] nextLine;
            String tampung = null;
            BufferedWriter bw = null;
            FileWriter fw = null;
            File file = new File(FILENAME);
            int i = 0;
            try {
                // konversi nilai kolom Label
                while ((nextLine = reader.readNext()) != null) {
                    x1[i] = Double.valueOf(nextLine[0]);
                    x3[i] = Double.valueOf(nextLine[2]);
                    x4[i] = Double.valueOf(nextLine[3]);
                    x5[i] = Double.valueOf(nextLine[4]);
                    x9[i] = Double.valueOf(nextLine[8]);
                    x10[i] = Double.valueOf(nextLine[9]);
                    i++;
                }
            } catch (IOException ex) {
                Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void feedInput(
            int InputNeuron,
            String Path) throws FileNotFoundException, IOException {
        CSVReader reader = new CSVReader(new FileReader(Path));
        String[] nextLine;
        int i = 0;
        while ((nextLine = reader.readNext()) != null) {
            for (int j = 0; j < InputNeuron - 2; j++) {
                trainInputs[i][j] = Double.parseDouble(nextLine[j]);
            }
            //hot encoding
            switch (nextLine[InputNeuron - 2]) {
                case "normal":
                    trainOutput[i] = 1;
                    break;
                case "serangan":
                    trainOutput[i] = -1;
                    break;
                default:
                    trainOutput[i] = 1;
                    break;
            }
            //end
            i++;
        }
    }

    void GetInputNeurons() throws IOException {
        InputNeuron = 0;
        CSVReader reader = new CSVReader(new FileReader(dir[1].replace("\\", "/") + "/" + fileName));
        String[] nextLine;
        nextLine = reader.readNext();
        InputNeuron = nextLine.length;
    }

    void Encoding(String[] Directory, String Filename) {
        try {
            String FILENAME = (Directory[1] + "\\" + stripExtension(Filename) + ".csv").replace("\\", "/");
            CSVReader reader = new CSVReader(new FileReader(Directory[0].replace("\\", "/") + "/dump.csv"));
            String[] nextLine;
            String tampung = null;
            BufferedWriter bw = null;
            FileWriter fw = null;
            File file = new File(FILENAME);
            int i = 0;
            try {
                // konversi nilai kolom Label
                while ((nextLine = reader.readNext()) != null) {
                    switch (nextLine[1]) {
                        case "other":
                            x2[i] = 0;
                            break;
                        case "smtp":
                            x2[i] = 1;
                            break;
                        case "ssh":
                            x2[i] = 2;
                            break;
                        case "http":
                            x2[i] = 3;
                            break;
                        case "ssl":
                            x2[i] = 4;
                            break;
                        case "dns":
                            x2[i] = 5;
                            break;
                        case "snmp":
                            x2[i] = 6;
                            break;
                        default:
                            x2[i] = 0;
                            break;
                    }
                    switch (nextLine[13]) {
                        case "RSTOS0":
                            x14[i] = 0;
                            break;
                        case "RSTO":
                            x14[i] = 1;
                            break;
                        case "SF":
                            x14[i] = 2;
                            break;
                        case "S0":
                            x14[i] = 3;
                            break;
                        case "RSTRH":
                            x14[i] = 4;
                            break;
                        case "RSTR":
                            x14[i] = 5;
                            break;
                        case "S1":
                            x14[i] = 6;
                            break;
                        case "REJ":
                            x14[i] = 7;
                            break;
                        case "S3":
                            x14[i] = 8;
                            break;
                        case "OTH":
                            x14[i] = 9;
                            break;
                        case "SHR":
                            x14[i] = 10;
                            break;
                        case "SH":
                            x14[i] = 11;
                            break;
                        case "S2":
                            x14[i] = 12;
                            break;
                        default:
                            x14[i] = 0;
                            break;
                    }
                    i++;
                }
            } catch (IOException ex) {
                Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void DataConverterPhase1(String Directory, String Filename) {
        int totBaris = Integer.parseInt(TxtTotRow.getText());
        if (totBaris > 4000) {
            totBaris = 4000;
        }
        final Path path = Paths.get(Directory.replace("\\", "/"));
        final Path txt = path.resolve(Filename);
        final Path csv = path.resolve("dump.csv");
        final Charset utf8 = Charset.forName("UTF-8");
        try (
                final Scanner scanner = new Scanner(Files.newBufferedReader(txt, utf8));
                final PrintWriter pw = new PrintWriter(Files.newBufferedWriter(csv, utf8, StandardOpenOption.CREATE_NEW))) {
            for (int i = 0; i < totBaris; i++) {
                pw.println(scanner.nextLine().replace('\t', ','));
            }
        } catch (IOException ex) {
            Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void DataConverterPhase2(String[] Directory, String Filename) {
        try {
            String FILENAME = (Directory[1] + "\\" + stripExtension(Filename) + ".csv").replace("\\", "/");
            CSVReader reader = new CSVReader(new FileReader(Directory[0].replace("\\", "/") + "/dump.csv"));
            String[] nextLine;
            String tampung = null;
            BufferedWriter bw = null;
            FileWriter fw = null;
            File file = new File(FILENAME);
            int i = 0;
            try {
                // konversi nilai kolom Label
                while ((nextLine = reader.readNext()) != null) {

                    switch (nextLine[17]) {
                        case "1":
                            tampung = "normal";
                            break;
                        case "-1":
                            tampung = "serangan";
                            break;
                        case "-2":
                            tampung = "serangan";
                            break;
                        default:
                            tampung = "null";
                            break;
                    }
                    try {
                        // if file doesnt exists, then create it
                        if (!file.exists()) {
                            file.createNewFile();
                        }
                        // true = append file
                        // menuliskan instances pada file
                        if ("1".equals(nextLine[17]) || "-1".equals(nextLine[17])
                                || "-2".equals(nextLine[17])) {
                            fw = new FileWriter(file.getAbsoluteFile(), true);
                            bw = new BufferedWriter(fw);
//                            if (jCheckBox1.isSelected()) {
                            bw.write(String.valueOf(GetZscore(x1[i], x1)));
                            bw.write(",");
//                            }
//                            if (jCheckBox2.isSelected() && CbSvc.isSelected()) {
                            switch (nextLine[1]) {
                                case "other":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                case "smtp":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                case "ssh":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                case "http":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                case "ssl":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                case "dns":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                case "snmp":
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                                default:
                                    bw.write(String.valueOf(GetZscore(x2[i], x2)));
                                    bw.write(",");
                                    break;
                            }
//                            } else if (jCheckBox2.isSelected()) {
//                                bw.write(nextLine[1]);
//                                bw.write(",");
//                            }
//                            if (jCheckBox3.isSelected()) {
                            bw.write(String.valueOf(GetZscore(x3[i], x3)));
                            bw.write(",");
//                            }
//                            if (jCheckBox4.isSelected()) {
                            bw.write(String.valueOf(GetZscore(x4[i], x4)));
                            bw.write(",");
//                            }
//                            if (jCheckBox5.isSelected()) {
                            bw.write(String.valueOf(GetZscore(x5[i], x5)));
                            bw.write(",");
//                            }
//                            if (jCheckBox6.isSelected()) {
                            bw.write(nextLine[5]);
                            bw.write(",");
//                            }
//                            if (jCheckBox7.isSelected()) {
                            bw.write(nextLine[6]);
                            bw.write(",");
//                            }
//                            if (jCheckBox8.isSelected()) {
                            bw.write(nextLine[7]);
                            bw.write(",");
//                            }
//                            if (jCheckBox9.isSelected()) {
                            bw.write(String.valueOf(GetZscore(x9[i], x9)));
                            bw.write(",");
//                            }
//                            if (jCheckBox10.isSelected()) {
                            bw.write(String.valueOf(GetZscore(x10[i], x10)));
                            bw.write(",");
//                            }
//                            if (jCheckBox11.isSelected()) {
                            bw.write(nextLine[10]);
                            bw.write(",");
//                            }
//                            if (jCheckBox12.isSelected()) {
                            bw.write(nextLine[11]);
                            bw.write(",");
//                            }
//                            if (jCheckBox13.isSelected()) {
                            bw.write(nextLine[12]);
                            bw.write(",");
//                            }
//                            if (jCheckBox14.isSelected() && CbFlg.isSelected()) {
                            switch (nextLine[13]) {
                                case "RSTOS0":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "RSTO":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "SF":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "S0":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "RSTRH":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "RSTR":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "S1":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "REJ":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "S3":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "OTH":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "SHR":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "SH":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                case "S2":
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                                default:
                                    bw.write(String.valueOf(GetZscore(x14[i], x14)));
                                    bw.write(",");
                                    break;
                            }
//                            } else if (jCheckBox14.isSelected()) {
//                                bw.write(nextLine[13]);
//                                bw.write(",");
//                            }
                            bw.write(tampung);
                            bw.write(System.lineSeparator());
                            i++;
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            if (bw != null) {
                                bw.close();
                            }
                            if (fw != null) {
                                fw.close();
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Preprocessing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    double[] x1 = new double[10000];
    double[] x2 = new double[10000];
    double[] x3 = new double[10000];
    double[] x4 = new double[10000];
    double[] x5 = new double[10000];
    double[] x9 = new double[10000];
    double[] x10 = new double[10000];
    double[] x14 = new double[10000];
    int MaxSample;

    void GetMaxSample() throws IOException {
        MaxSample = 0;
        CSVReader reader = new CSVReader(new FileReader(dir[0].replace("\\", "/") + "/" + "dump.csv"));
        String[] nextLine;
        while ((nextLine = reader.readNext()) != null) {
            MaxSample++;
        }
    }

    double GetMean(double[] vector) {
        double tot = 0.0;
        double mean = 0.0;
        for (int i = 0; i < vector.length; i++) {
            tot += vector[i];
        }
        mean = tot / vector.length;
        return mean;
    }

    double GetVariance(double[] vector) {
        double mean = GetMean(vector);
        double temp = 0;
        for (double a : vector) {
            temp += (a - mean) * (a - mean);
        }
        return temp / (MaxSample - 1);
    }

    double GetStdDev(double[] vector) {
        return Math.sqrt(GetVariance(vector));
    }

    double GetZscore(double input, double[] vector) {
        return (input - GetMean(vector)) / GetStdDev(vector);
    }

    /**
     * @param args the command line arguments
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Preprocessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Preprocessing().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBck;
    private javax.swing.JButton BtnCsv;
    private javax.swing.JButton BtnRaw;
    private javax.swing.JButton BtnRun;
    private javax.swing.JTable TblEncodingFlag;
    private javax.swing.JTable TblEncodingService;
    private javax.swing.JTable TblFinalDataset;
    private javax.swing.JTable TblNormalization;
    private javax.swing.JTable TblRawDataset;
    private javax.swing.JTextField TxtCsv;
    private javax.swing.JTextField TxtRaw;
    private javax.swing.JTextField TxtTotRow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    // End of variables declaration//GEN-END:variables
}
