package Learning;

import Main.Home;
import com.opencsv.CSVReader;
import java.awt.List;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author INTEL&AMD
 */
public class Backpropagation extends javax.swing.JFrame {

    /**
     * Creates new form Backpropagation
     */
    public Backpropagation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        TxtLoadData = new javax.swing.JTextField();
        BtnBrowse = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        TxtTrainingCycle = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TxtLearningRate = new javax.swing.JTextField();
        BtnRun = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane9 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TblDataset = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        Tbl1FoldTrainingDataset = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        Tbl1FoldTestingDataset = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tbl1FoldZin = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tbl1FoldZ = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        Tbl1FoldYin = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        Tbl1FoldY = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        Tbl1FoldErrorY = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        Tbl1FoldDeltaW = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        Tbl1FoldErrorZ = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        Tbl1FoldDeltaV = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        Tbl1FoldUpdatedV = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        Tbl1FoldUpdatedW = new javax.swing.JTable();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        TblWeightsV = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TblWeightsW = new javax.swing.JTable();
        jScrollPane16 = new javax.swing.JScrollPane();
        TxtAreaTesting = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Backpropagation");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(490, 490, 490))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Training"));

        jLabel2.setText("Load Train Data");

        TxtLoadData.setPreferredSize(new java.awt.Dimension(165, 25));
        TxtLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TxtLoadDataActionPerformed(evt);
            }
        });

        BtnBrowse.setText("Browse");
        BtnBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnBrowseMouseClicked(evt);
            }
        });

        jLabel5.setText("Training Cycle");

        TxtTrainingCycle.setText("99999");

        jLabel4.setText("Learning Rate");

        TxtLearningRate.setText("0.1");

        BtnRun.setText("Run");
        BtnRun.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BtnRunMouseClicked(evt);
            }
        });
        BtnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnRunActionPerformed(evt);
            }
        });

        jButton1.setText("Back");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(27, 27, 27)
                            .addComponent(TxtTrainingCycle, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(BtnBrowse)
                                .addComponent(TxtLoadData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TxtLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(BtnRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtLoadData, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(4, 4, 4)
                .addComponent(BtnBrowse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TxtTrainingCycle, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TxtLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnRun)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));

        TblDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(TblDataset);

        jTabbedPane9.addTab("Dataset", jScrollPane2);

        Tbl1FoldTrainingDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(Tbl1FoldTrainingDataset);

        jTabbedPane5.addTab("Training Dataset", jScrollPane9);

        Tbl1FoldTestingDataset.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(Tbl1FoldTestingDataset);

        jTabbedPane5.addTab("Testing Dataset", jScrollPane10);

        Tbl1FoldZin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Tbl1FoldZin);

        jTabbedPane5.addTab("Zin", jScrollPane1);

        Tbl1FoldZ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(Tbl1FoldZ);

        jTabbedPane5.addTab("Z", jScrollPane4);

        Tbl1FoldYin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(Tbl1FoldYin);

        jTabbedPane5.addTab("Yin", jScrollPane5);

        Tbl1FoldY.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane6.setViewportView(Tbl1FoldY);

        jTabbedPane5.addTab("Y", jScrollPane6);

        Tbl1FoldErrorY.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(Tbl1FoldErrorY);

        jTabbedPane5.addTab("ErrorY", jScrollPane7);

        Tbl1FoldDeltaW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(Tbl1FoldDeltaW);

        jTabbedPane5.addTab("DeltaW", jScrollPane12);

        Tbl1FoldErrorZ.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(Tbl1FoldErrorZ);

        jTabbedPane5.addTab("ErrorZ", jScrollPane11);

        Tbl1FoldDeltaV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(Tbl1FoldDeltaV);

        jTabbedPane5.addTab("DeltaV", jScrollPane13);

        Tbl1FoldUpdatedV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(Tbl1FoldUpdatedV);

        jTabbedPane5.addTab("UpdatedV", jScrollPane14);

        Tbl1FoldUpdatedW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(Tbl1FoldUpdatedW);

        jTabbedPane5.addTab("UpdatedW", jScrollPane15);

        jTabbedPane1.addTab("1-Fold", jTabbedPane5);

        jTabbedPane9.addTab("10-Fold Cross-Validation", jTabbedPane1);

        TblWeightsV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(TblWeightsV);

        jTabbedPane4.addTab("V", jScrollPane8);

        TblWeightsW.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(TblWeightsW);

        jTabbedPane4.addTab("W", jScrollPane3);

        jTabbedPane9.addTab("Final Weights", jTabbedPane4);

        TxtAreaTesting.setColumns(20);
        TxtAreaTesting.setRows(5);
        jScrollPane16.setViewportView(TxtAreaTesting);

        jTabbedPane9.addTab("Testing", jScrollPane16);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 924, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private static final int INPUT_NEURONS = 15;
    private static final int OUTPUT_NEURONS = 1;
    private static final int MAX_SAMPLES = 10000;
    private static final int HIDDEN_NEURONS = 30;    // Rho.
    private static final double NOISE_FACTOR = 1.5;
    // Input to Hidden Weights (with Biases).
    private static double wih[][] = new double[INPUT_NEURONS + 1][HIDDEN_NEURONS];
    // Hidden to Output Weights (with Biases).
    private static double who[] = new double[HIDDEN_NEURONS + 1];
    // Activations.
    private static double inputs[] = new double[INPUT_NEURONS];
    private static double hidden[] = new double[HIDDEN_NEURONS];
    private static double target;
    private static double actual;
    // Unit errors.
    private static double erro;
    private static double errh[] = new double[HIDDEN_NEURONS];
    private static double trainInputs[][] = new double[MAX_SAMPLES][INPUT_NEURONS];
    private static int trainOutput[] = new int[MAX_SAMPLES];
    static String fileName;
    static String dir;
    static int MaxSample;
    static int InputNeuron;
    int HiddenNeuron;
    double LearningRate;
    int TrainingCycle;

    private void BtnBrowseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnBrowseMouseClicked
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        String choosertitle = null;
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(choosertitle);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV FILES", "csv");
        chooser.setAcceptAllFileFilterUsed(true);
        chooser.setFileFilter(filter);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            TxtLoadData.setText(chooser.getSelectedFile().toString());
            fileName = chooser.getSelectedFile().getName();
            dir = chooser.getCurrentDirectory().toString();
        } else {
            TxtLoadData.setText("No file selected.");
        }
    }//GEN-LAST:event_BtnBrowseMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//        ShowDataset();
    }//GEN-LAST:event_formWindowOpened

    public void GetInputNeurons() throws IOException {
        InputNeuron = 0;
        CSVReader reader = new CSVReader(new FileReader(dir.replace("\\", "/") + "/" + fileName));
        String[] nextLine;
        nextLine = reader.readNext();
        InputNeuron = nextLine.length;
    }

    static void GetMaxSample() throws IOException {
        MaxSample = 0;
        CSVReader reader = new CSVReader(new FileReader(dir.replace("\\", "/") + "/" + fileName));
        String[] nextLine;
        while ((nextLine = reader.readNext()) != null) {
            MaxSample++;
        }
    }

    void GetHiddenNeuron() {
//        HiddenNeuron = Integer.valueOf(TxtHiddenNeuron.getText());
        HiddenNeuron = 9;
    }

    void GetLearningRate() {
//        LearningRate = Double.parseDouble(TxtLearningRate.getText());
        LearningRate = 0.1;
    }

    void GetTrainingCycle() {
//        TrainingCycle = Integer.valueOf(TxtTrainingCycle.getText());
        TrainingCycle = 500;
    }

    double CalcMSE(double[] y, double[] t) {
        double mseData = 0;
        int n = y.length;
        for (int i = 0; i < n; i++) {
            mseData += (t[i] - maximum(y[i])) * (t[i] - maximum(y[i]));
        }
        return mseData / n;
    }

//    void ShowInitHN() {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        HNInitWeight.setModel(model);
//        String[] columns = new String[]{
//            "IN + Bias", "HN[1]", "HN[2]", "HN[3]", "HN[4]", "HN[5]",
//            "HN[6]", "HN[7]", "HN[8]", "HN[9]"};
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//        Object[] data = new Object[InputNeuron + 1];
//        for (int inp = 0; inp < InputNeuron; inp++) {
//            data[0] = inp + 1;
//            for (int hid = 0; hid < HiddenNeuron; hid++) {
//                data[hid + 1] = wih[inp][hid];
//            }
//            model.addRow(data);
//        } // epoch
//    }
//
//    void ShowInitON() {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        TblInitON.setModel(model);
//        String[] columns = new String[]{
//            "Num of HN", "ON"};
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//        Object[] data = new Object[HiddenNeuron + 1];
//        //actual data for the table in a 2d array
//        for (int hid = 0; hid <= HiddenNeuron; hid++) // Do not subtract 1 here.
//        {
//            data[0] = hid + 1;
//            data[1] = who[hid];
//            model.addRow(data);
//        } // epoch
//    }
//
    void ShowDataset() throws IOException {
        //headers for the table

        DefaultTableModel model;
        model = new DefaultTableModel();
        TblDataset.setModel(model);
        String[] columns = new String[]{
            "No", "x[1]", "x[2]", "x[3]", "x[4]", "x[5]",
            "x[6]", "x[7]",
            "x[8]", "x[9]", "x[10]",
            "x[11]", "x[12]",
            "x[13]", "x[14]", "y"
        };
//        String[] columns = new String[]{
//            "No", "Duration", "Service", "Source bytes", "Label"
//        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }
        //actual data for the table in a 2d array
        Object[] data = new Object[InputNeuron + 1];
        for (int i = 0; i < MaxSample; i++) {
            data[0] = i + 1;
            for (int j = 0; j < InputNeuron - 1; j++) {
                data[j + 1] = trainInputs[i][j];
            }
            data[InputNeuron] = trainOutput[i];
            model.addRow(data);
        }
    }

    void Show1FoldTrainingDataset() {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldTrainingDataset.setModel(model);
        String[] columns = new String[]{
            "No", "x[1]", "x[2]", "x[3]", "x[4]", "x[5]", "x[6]", "x[7]",
            "x[8]", "x[9]", "x[10]", "x[11]", "x[12]", "x[13]", "x[14]", "label"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][InputNeuron + 2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j < InputNeuron; j++) {
                data[i][j + 1] = trainInputs[train[0][i]][j];
            }
            data[i][15] = trainOutput[train[0][i]];
            model.addRow(data[i]);
        }
    }

    void Show1FoldTestingDataset() {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldTestingDataset.setModel(model);
        String[] columns = new String[]{
            "No", "x[1]", "x[2]", "x[3]", "x[4]", "x[5]", "x[6]", "x[7]",
            "x[8]", "x[9]", "x[10]", "x[11]", "x[12]", "x[13]", "x[14]", "label"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][InputNeuron + 2];

        for (int i = 0; i < test[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j < InputNeuron; j++) {
                data[i][j + 1] = trainInputs[test[0][i]][j];
            }
            data[i][15] = trainOutput[test[0][i]];
            model.addRow(data[i]);
        }
    }

    void Show1FoldZin(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldZin.setModel(model);
        String[] columns = new String[]{
            "No", "zin[1]", "zin[2]", "zin[3]", "zin[4]", "zin[5]", "zin[6]", "zin[7]",
            "zin[8]", "zin[9]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][HiddenNeuron + 2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j < HiddenNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }

    }

    void Show1FoldZ(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldZ.setModel(model);
        String[] columns = new String[]{
            "No", "z[1]", "z[2]", "z[3]", "z[4]", "z[5]", "z[6]", "z[7]",
            "z[8]", "z[9]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][HiddenNeuron + 2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j < HiddenNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }

    }

    void Show1FoldYin(double[][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldYin.setModel(model);
        String[] columns = new String[]{
            "No", "yin"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            data[i][1] = vector[0][i];
            model.addRow(data[i]);
        }
    }

    void Show1FoldY(double[][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldY.setModel(model);
        String[] columns = new String[]{
            "No", "y"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            data[i][1] = vector[0][i];
            model.addRow(data[i]);
        }
    }

    void Show1FoldErrorY(double[][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldErrorY.setModel(model);
        String[] columns = new String[]{
            "No", "errory"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            data[i][1] = vector[0][i];
            model.addRow(data[i]);
        }
    }

    void Show1FoldDeltaW(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldDeltaW.setModel(model);
        String[] columns = new String[]{
            "No", "DeltaW[1]", "DeltaW[2]", "DeltaW[3]", "DeltaW[4]", "DeltaW[5]",
            "DeltaW[6]", "DeltaW[7]", "DeltaW[8]", "DeltaW[9]", "DeltaW[10]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][HiddenNeuron + 3];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j <= HiddenNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }
    }

    void Show1FoldUpdatedW(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldUpdatedW.setModel(model);
        String[] columns = new String[]{
            "No", "UpdatedW[1]", "UpdatedW[2]", "UpdatedW[3]", "UpdatedW[4]", "UpdatedW[5]",
            "UpdatedW[6]", "UpdatedW[7]", "UpdatedW[8]", "UpdatedW[9]", "UpdatedW[10]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][HiddenNeuron + 3];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j <= HiddenNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }
    }

    void Show1FoldErrorZ(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldErrorZ.setModel(model);
        String[] columns = new String[]{
            "No", "errorz[1]", "errorz[2]", "errorz[3]", "errorz[4]",
            "errorz[5]", "errorz[6]", "errorz[7]",
            "errorz[8]", "errorz[9]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][HiddenNeuron + 2];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j < HiddenNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }
    }

    void Show1FoldDeltaV(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldDeltaV.setModel(model);
        String[] columns = new String[]{
            "No", "DeltaV[1]", "DeltaV[2]", "DeltaV[3]", "DeltaV[4]", "DeltaV[5]",
            "DeltaV[6]", "DeltaV[7]", "DeltaV[8]", "DeltaV[9]", "DeltaV[10]",
            "DeltaV[11]", "DeltaV[12]", "DeltaV[13]", "DeltaV[14]", "DeltaV[15]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][InputNeuron + 3];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j <= InputNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }
    }

    void Show1FoldUpdatedV(double[][][] vector) {
        DefaultTableModel model;
        model = new DefaultTableModel();
        Tbl1FoldUpdatedV.setModel(model);
        String[] columns = new String[]{
            "No", "UpdatedV[1]", "UpdatedV[2]", "UpdatedV[3]", "UpdatedV[4]", "UpdatedV[5]",
            "UpdatedV[6]", "UpdatedV[7]", "UpdatedV[8]", "UpdatedV[9]", "UpdatedV[10]",
            "UpdatedV[11]", "UpdatedV[12]", "UpdatedV[13]", "UpdatedV[14]", "UpdatedV[15]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[MaxSample][InputNeuron + 3];

        for (int i = 0; i < train[0].length; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j <= InputNeuron; j++) {
                data[i][j + 1] = vector[0][i][j];
            }
            model.addRow(data[i]);
        }
    }

    void ShowWeightsV() {
        DefaultTableModel model;
        model = new DefaultTableModel();
        TblWeightsV.setModel(model);
        String[] columns = new String[]{
            "Baris", "v[1]", "v[2]", "v[3]", "v[4]", "v[5]", "v[6]", "v[7]",
            "v[8]", "v[9]"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[InputNeuron][HiddenNeuron + 2];

        for (int i = 0; i < InputNeuron; i++) {
            data[i][0] = i + 1;
            for (int j = 0; j < HiddenNeuron; j++) {
                data[i][j + 1] = wih[i][j];
            }
            model.addRow(data[i]);
        }
    }

    void ShowWeightsW() {
        DefaultTableModel model;
        model = new DefaultTableModel();
        TblWeightsW.setModel(model);
        String[] columns = new String[]{
            "Baris", "w"
        };
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }

        //actual data for the table in a 2d array
        Object[][] data = new Object[HiddenNeuron + 1][OUTPUT_NEURONS + 2];

        for (int i = 0; i <= HiddenNeuron; i++) {
            data[i][0] = i + 1;
            data[i][1] = who[i];
            model.addRow(data[i]);
        }
    }

    void ShowTrainCalc(double[] vector, double[] vector2,
            double vector3, double vector4, double vector5, double[] vector6,
            double[] vector7, double[][] vector9) {
        DefaultTableModel model;
        model = new DefaultTableModel();
//        TblCalc.setModel(model);
        String[] columns = new String[]{
            "Name", "Value"
        };
        String tampung = "";
        String tampung2 = "";
        String tampung3 = "";
        String tampung4 = "";
        String tampung5 = "";
        String tampung6 = "";
        String tampung7 = "";
        String tampung8 = "";
        String tampung9 = "";
        String tampung10 = "";
        for (int i = 0; i < columns.length; i++) {
            model.addColumn(columns[i]);
        }
        int sample = 0;

        //actual data for the table in a 2d array
        Object[][] data = new Object[11][2];

        data[0][0] = "Zin";
        for (int j = 0; j < HiddenNeuron - 1; j++) {
            tampung += String.valueOf(vector[j]) + ", ";
        }
        tampung += String.valueOf(vector[HiddenNeuron - 1]);
        data[0][1] = tampung;
        model.addRow(data[0]);

        data[1][0] = "Z";
        for (int j = 0; j < HiddenNeuron - 1; j++) {
            tampung2 += String.valueOf(vector2[j]) + ", ";
        }
        tampung2 += String.valueOf(vector2[HiddenNeuron - 1]);
        data[1][1] = tampung2;
        model.addRow(data[1]);

        data[2][0] = "Yin";
        tampung3 += String.valueOf(vector3);
        data[2][1] = tampung3;
        model.addRow(data[2]);

        data[3][0] = "Y";
        tampung4 += String.valueOf(vector4);
        data[3][1] = tampung4;
        model.addRow(data[3]);

        data[4][0] = "ErrorY";
        tampung5 += String.valueOf(vector5);
        data[4][1] = tampung5;
        model.addRow(data[4]);

        data[5][0] = "DeltaW";
        for (int j = 0; j < HiddenNeuron - 1; j++) {
            tampung7 += String.valueOf(vector7[j]) + ", ";
        }
        tampung7 += String.valueOf(vector7[HiddenNeuron - 1]);
        data[5][1] = tampung7;
        model.addRow(data[5]);

        data[6][0] = "DeltaW0";
        tampung8 += String.valueOf(vector7[HiddenNeuron]);
        data[6][1] = tampung8;
        model.addRow(data[6]);

        data[7][0] = "ErrorZ";
        for (int j = 0; j < HiddenNeuron - 1; j++) {
            tampung6 += String.valueOf(vector6[j]) + ", ";
        }
        tampung6 += String.valueOf(vector6[HiddenNeuron - 1]);
        data[7][1] = tampung6;
        model.addRow(data[7]);

        data[8][0] = "DeltaV";
        for (int j = 0; j < HiddenNeuron; j++) {
            for (int i = 0; i < InputNeuron - 1; i++) {
                tampung9 += String.valueOf(vector9[i][j]) + ", ";
            }
        }
        tampung9 += String.valueOf(vector9[InputNeuron - 1][HiddenNeuron]);
        data[8][1] = tampung9;
        model.addRow(data[8]);

        data[10][0] = "DeltaV0";
        for (int j = 0; j < HiddenNeuron - 1; j++) {
            tampung10 += String.valueOf(vector9[InputNeuron - 1][j]) + ", ";
        }
        tampung10 += String.valueOf(vector9[InputNeuron - 1][HiddenNeuron]);
        data[10][1] = tampung10;
        model.addRow(data[10]);

    }
//    void ShowTrainV(double[][] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        TblV.setModel(model);
//        String[] columns = new String[]{
//            "No", "V[1]", "V[2]", "V[3]", "V[4]", "V[5]", "V[6]", "V[7]",
//            "V[8]", "V[9]"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[InputNeuron + 3][HiddenNeuron + 2];
//
//        for (int i = 0; i < InputNeuron; i++) {
//            data[i][0] = i + 1;
//            for (int j = 0; j < HiddenNeuron; j++) {
//                data[i][j + 1] = vector[i][j];
//            }
//            model.addRow(data[i]);
//        }
//    }
//    void ShowTrainW(double[] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        TblW.setModel(model);
//        String[] columns = new String[]{
//            "W[0]", "W[1]", "W[2]", "W[3]", "W[4]", "W[5]", "W[6]", "W[7]",
//            "W[8]", "W[9]"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//
//        //actual data for the table in a 2d array
//        Object[] data = new Object[HiddenNeuron + 1];
//        data[0] = vector[HiddenNeuron];
//        for (int j = 0; j < HiddenNeuron; j++) {
//            data[j + 1] = vector[j];
//        }
//        model.addRow(data);
//    }
//
//    void FFHiddenActivationFunction(double[][] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        HNgx.setModel(model);
//        String[] columns = new String[]{
//            "Training Cycle", "g(HN[1])", "g(HN[2])", "g(HN3[3])",
//            "g(HN[4])", "g(HN[5])", "g(HN3[6])", "g(HN[7])", "g(HN[8])", "g(HN3[9])"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[TrainingCycle][HiddenNeuron + 1];
//        for (int epoch = 0; epoch < TrainingCycle; epoch++) {
//            data[epoch][0] = epoch + 1;
//            for (int j = 0; j < HiddenNeuron; j++) {
//                data[epoch][j + 1] = vector[epoch][j];
//            }
//            model.addRow(data[epoch]);
//        }
//    }
//
//    void FFOutputInputFunction(double[] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        ONfx.setModel(model);
//        String[] columns = new String[]{
//            "Training Cycle", "f(ON)"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[TrainingCycle][2];
//        for (int epoch = 0; epoch < TrainingCycle; epoch++) {
//            data[epoch][0] = epoch + 1;
//            data[epoch][1] = vector[epoch];
//            model.addRow(data[epoch]);
//        }
//    }
//
//    void FFOutputActivationFunction(double[] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        ONgx.setModel(model);
//        String[] columns = new String[]{
//            "Training Cycle", "g(ON)"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[TrainingCycle][2];
//        for (int epoch = 0; epoch < TrainingCycle; epoch++) {
//            data[epoch][0] = epoch + 1;
//            data[epoch][1] = vector[epoch];
//            model.addRow(data[epoch]);
//        }
//    }
//
//    void BPOutputError(double[] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        BPOutputError.setModel(model);
//        String[] columns = new String[]{
//            "Training Cycle", "EO"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[TrainingCycle][2];
//        for (int epoch = 0; epoch < TrainingCycle; epoch++) {
//            data[epoch][0] = epoch + 1;
//            data[epoch][1] = vector[epoch];
//            model.addRow(data[epoch]);
//        }
//    }
//
//    void BPHiddenError(double[][] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        BPHiddenError.setModel(model);
//        String[] columns = new String[]{
//            "Training Cycle", "e(EH[1])", "e(EH[2])", "e(EH[3])", "e(EH[4])",
//            "e(EH[5])", "e(EH[6])", "e(EH[7])", "e(EH[8])", "e(EH[9])"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[TrainingCycle][HiddenNeuron + 1];
//        for (int epoch = 0; epoch < TrainingCycle; epoch++) {
//            data[epoch][0] = epoch + 1;
//            for (int j = 0; j < HiddenNeuron; j++) {
//                data[epoch][j + 1] = vector[epoch][j];
//            }
//            model.addRow(data[epoch]);
//        }
//    }
//
//    void BPUpdOutput(double[][] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        BPOutputUpdtW.setModel(model);
//        String[] columns = new String[]{
//            "Training Cycle", "HN[1]", "HN[2]", "HN[3]", "HN[4]", "HN[5]",
//            "HN[6]", "HN[7]", "HN[8]", "HN[9]", "Bias"
//        };
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//
//        //actual data for the table in a 2d array
//        Object[][] data = new Object[TrainingCycle][HiddenNeuron + 2];
//        for (int epoch = 0; epoch < TrainingCycle; epoch++) {
//            data[epoch][0] = epoch + 1;
//            for (int j = 0; j <= HiddenNeuron; j++) {
//                data[epoch][j + 1] = vector[epoch][j];
//            }
//            model.addRow(data[epoch]);
//        }
//    }
//
//    void BPUpdHidd(double[][] vector) {
//        DefaultTableModel model;
//        model = new DefaultTableModel();
//        BPHiddUpdtW.setModel(model);
//        String[] columns = new String[]{
//            "IN + Bias", "IN[1]", "IN[2]", "IN[3]", "IN[4]", "IN[5]", "IN[6]",
//            "IN[7]", "IN[8]", "IN[9]", "IN[10]", "IN[11]", "IN[12]", "IN[13]", "IN[14]"};
//        for (int i = 0; i < columns.length; i++) {
//            model.addColumn(columns[i]);
//        }
//        int sample = 0;
//        Object[][] data = new Object[InputNeuron + 1][HiddenNeuron + 1];
//        for (int inp = 0; inp < InputNeuron; inp++) {
//            data[inp][0] = inp + 1;
//            for (int hid = 0; hid < HiddenNeuron; hid++) {
//                data[inp][hid + 1] = wih[inp][hid];
//                data[InputNeuron][hid] = wih[InputNeuron][hid];
//            }
//
//            model.addRow(data[inp]);
//        } // epoch
//    }
    public int k;
    /**
     * The index of training instances.
     */
    public int[][] train;
    /**
     * The index of testing instances.
     */
    public int[][] test;

    void CrossValidation(int n, int k) {
        if (n < 0) {
            throw new IllegalArgumentException("Invalid sample size: " + n);
        }

        if (k < 0 || k > n) {
            throw new IllegalArgumentException("Invalid number of CV rounds: " + k);
        }



        train = new int[k][];
        test = new int[k][];
        int chunk = n / k;
        for (int i = 0; i < k; i++) {
            int start = chunk * i;
            int end = chunk * (i + 1) - 1;

            train[i] = new int[n - end + start - 1];
            test[i] = new int[end - start + 1];
            for (int j = 0, p = 0, q = 0; j < n; j++) {
                if (j >= start && j <= end) {
                    test[i][p] = j;
                    p++;
                } else {
                    train[i][q] = j;
                    q++;
                }
            }
        }
    }

    public void feedInput(
            int InputNeuron,
            String Path) throws FileNotFoundException, IOException {
        CSVReader reader = new CSVReader(new FileReader(Path));
        String[] nextLine;
        int i = 0;
        while ((nextLine = reader.readNext()) != null) {
            for (int j = 0; j < InputNeuron - 1; j++) {
                trainInputs[i][j] = Double.parseDouble(nextLine[j]);
            }
            //hot encoding
            switch (nextLine[InputNeuron - 1]) {
                case "normal":
                    trainOutput[i] = 1;
                    break;
                case "serangan":
                    trainOutput[i] = -1;
                    break;
                default:
                    trainOutput[i] = 1;
                    break;
            }
            //end
            i++;
        }
    }
    double sum = 0.0;
    double[] sum1 = new double[HIDDEN_NEURONS];
    double[] deltaW = new double[HIDDEN_NEURONS];
    double[][] deltaV = new double[INPUT_NEURONS + 1][HIDDEN_NEURONS];

    private void feedForward() {

        // Calculate input to hidden layer.
        for (int hid = 0; hid < HiddenNeuron; hid++) {
            sum1[hid] = 0.0;
            for (int inp = 0; inp < InputNeuron - 1; inp++) {
                sum1[hid] += inputs[inp] * wih[inp][hid];
            } // inp

            sum1[hid] += wih[InputNeuron - 1][hid]; // Add in bias.

            hidden[hid] = sigmoid(sum1[hid]);
        } // hid
        // Calculate the hidden to output layer.
        sum = 0.0;
        for (int hid = 0; hid < HiddenNeuron; hid++) {
            sum += hidden[hid] * who[hid];
        } // hid

        sum += who[HiddenNeuron]; // Add in bias.
        actual = sigmoid(sum);
        return;
    }

    private void backPropagate() {
        // Calculate the output layer error (step 3 for output cell).
        erro = (target - actual) * sigmoidDerivative(actual);


        // Calculate the hidden layer error (step 3 for hidden cell).
        for (int hid = 0; hid < HiddenNeuron; hid++) {
            errh[hid] = 0.0;
            errh[hid] += erro * who[hid];
            errh[hid] *= sigmoidDerivative(hidden[hid]);
        }
//         Update the weights for the output layer (step 4).
        for (int hid = 0; hid < HiddenNeuron; hid++) {
            deltaW[hid] = (LearningRate * erro * hidden[hid]);
            who[hid] += deltaW[hid];
        } // hid
        deltaW[HiddenNeuron] = (LearningRate * erro);
        who[HiddenNeuron] += deltaW[HiddenNeuron]; // Update the bias.
//         out

//         Update the weights for the hidden layer (step 4).
        for (int hid = 0; hid < HiddenNeuron; hid++) {
            for (int inp = 0; inp < InputNeuron - 1; inp++) {
                deltaV[inp][hid] = (LearningRate * errh[hid] * inputs[inp]);
                wih[inp][hid] += deltaV[inp][hid];
            } // inp
            deltaV[InputNeuron - 1][hid] = (LearningRate * errh[hid]);
            wih[InputNeuron - 1][hid] += deltaV[InputNeuron - 1][hid]; // Update the bias.
        } // hid

        return;
    }

    private void assignRandomWeights() {
        for (int inp = 0; inp < InputNeuron - 1; inp++) // Do not subtract 1 here.
        {
            for (int hid = 0; hid < HiddenNeuron; hid++) {
                // Assign a random weight value between -0.5 and 0.5
//                if (CbRndm.isSelected()) {
                wih[inp][hid] = new Random().nextDouble() - 0.5;
//                } else {
//                    wih[inp][hid] = Double.valueOf(TxtWeight.getText());
//                }
//                wih[inp][hid] = 0.0034;
                wih[InputNeuron - 1][hid] = 1;//bias
            } // hid
        } // inp

        for (int hid = 0; hid < HiddenNeuron; hid++) // Do not subtract 1 here.
        {
            // Assign a random weight value between -0.5 and 0.5
//            if (CbRndm.isSelected()) {
            who[hid] = new Random().nextDouble() - 0.5;
//            } else {
//                who[hid] = Double.valueOf(TxtWeight.getText());
//            }
//            who[hid] = 0.34;
            // out
        } // hid
        who[HiddenNeuron] = 1;
        return;
    }

    private static double sigmoid(final double val) {
        return (1.0 / (1.0 + Math.exp(-val)));
    }

    private static double sigmoidDerivative(final double val) {
        return (val * (1.0 - val));
    }

    private int maximum(final double actual) {
        // This function returns the index of the maximum of vector().
        int sel = 0;

        if (actual >= 0.5) {

            sel = 1;
        } else if (actual < 0.5) {
            sel = -1;
        }

        return sel;
    }

    private void getTrainingStats() {
        TxtAreaTesting.setText("");
        DecimalFormat dfm = new java.text.DecimalFormat("###0.0");
        double x = 0.0;

        for (int k = 0; k < 10; k++) {
            double sum = 0.0;
            int sumErr = 0;
            for (int i = 0; i < test[k].length; i++) {
                for (int j = 0; j < InputNeuron - 1; j++) {
                    inputs[j] = trainInputs[test[k][i]][j];
                }
                target = trainOutput[test[k][i]];
                feedForward();
//
                if (maximum(actual) == maximum(target)) {
                    sum += 1;
//                    System.out.println("Output: " + maximum(actual) + "\t" + "Target: " + maximum(target));
//                TxtAreaOutput.append("\n");
                } else {
//                    System.out.println("Output: " + maximum(actual) + "\t" + "Target: " + maximum(target));
//                TxtAreaOutput.append("\n");
                    sumErr += 1;
                }

            }
//            TxtAreaTesting.append("Wrong Prediction : " + sumErr + " of " + test[k].length + " Record");
//            TxtAreaTesting.append("\n");
            TxtAreaTesting.append("Accuracy " + (k + 1) + " Fold : " + dfm.format(((double) sum / (double) test[k].length * 100.0)) + "% Correct.");
            x += ((double) sum / (double) test[k].length * 100.0);
            TxtAreaTesting.append("\n");
            TxtAreaTesting.append("\n");

        }
        x /= 10;
        TxtAreaTesting.append("\n");
        TxtAreaTesting.append("\n");
        TxtAreaTesting.append("Accuracy Network : " + dfm.format(x)+"%");
//        TxtAreaOutput.append("\n");

//        TxtAreaOutput.append("\n");

//        TxtAreaOutput.append("\n");
//        TxtAreaOutput.append("\n");
//        TxtAreaOutput.append("-------------------------------------------------------");
//        TxtAreaOutput.append("\n");

    }

    private void BtnRunMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BtnRunMouseClicked

        try {
            DecimalFormat dfm = new java.text.DecimalFormat("###0.0");
            int sample = 0;

            GetInputNeurons();
            GetMaxSample();
            GetTrainingCycle();
            GetLearningRate();
            GetHiddenNeuron();
            assignRandomWeights();

            String Path = dir.replace("\\", "/") + "/" + fileName;
            feedInput(InputNeuron, Path);
            ShowDataset();
            CrossValidation(MaxSample, 10);
            double mse = 0.0;
            double[][][] Zin = new double[10][MaxSample][HiddenNeuron];
            double[][][] Z = new double[10][MaxSample][HiddenNeuron];
            double[][] Yin = new double[10][MaxSample];
            double[][] Y = new double[10][MaxSample];
            double[][] ErrorY = new double[10][MaxSample];
            double[][][] ErrorZ = new double[10][MaxSample][HiddenNeuron];
            double[][][] DeltaW = new double[10][MaxSample][HiddenNeuron + 1];
            double[][][] DeltaV = new double[10][MaxSample][InputNeuron + 2];
            double[][][] UpdatedV = new double[10][MaxSample][InputNeuron + 2];
            double[][][] UpdatedW = new double[10][MaxSample][HiddenNeuron + 1];

            for (int k = 0; k < 10; k++) {
                double[] predict = new double[train[0].length];
                double[] targ = new double[train[0].length];
                for (int epoch = 0; epoch < TrainingCycle; epoch++) {
                    for (int i = 0; i < train[k].length; i++) {
                        for (int j = 0; j < InputNeuron - 1; j++) {
                            inputs[j] = trainInputs[train[k][i]][j];

                        }
                        target = trainOutput[train[k][i]];
                        feedForward();
//                        predict[i] = actual;
//                        targ[i] = target;
                        backPropagate();
                        for (int j = 0; j < HiddenNeuron; j++) {
                            Zin[k][i][j] = sum1[j];
                        }
                        for (int j = 0; j < HiddenNeuron; j++) {
                            Z[k][i][j] = hidden[j];
                        }
                        Yin[k][i] = sum;
                        Y[k][i] = actual;
                        ErrorY[k][i] = erro;
                        for (int j = 0; j < HiddenNeuron; j++) {
                            ErrorZ[k][i][j] = errh[j];
                        }
                        for (int j = 0; j <= HiddenNeuron; j++) {
                            DeltaW[k][i][j] = deltaW[j];
                        }
                        for (int hid = 0; hid < HiddenNeuron; hid++) {
                            for (int inp = 0; inp <= InputNeuron; inp++) {
                                DeltaV[k][i][inp] = deltaV[inp][hid];
                            }
                        }
                        for (int hid = 0; hid < HiddenNeuron; hid++) {
                            for (int inp = 0; inp <= InputNeuron; inp++) {
                                UpdatedV[k][i][inp] = wih[inp][hid];
                            }
                        }
                        for (int j = 0; j <= HiddenNeuron; j++) {
                            UpdatedW[k][i][j] = who[j];
                        }
                    }
                    if (CalcMSE(predict, targ) < 0.06) {
                        break;
                    }
                } // epoch 

            }
            Show1FoldTrainingDataset();
            Show1FoldTestingDataset();
            Show1FoldZin(Zin);
            Show1FoldZ(Z);
            Show1FoldYin(Yin);
            Show1FoldY(Y);
            Show1FoldErrorY(ErrorY);
            Show1FoldDeltaW(DeltaW);
            Show1FoldErrorZ(ErrorZ);
            Show1FoldDeltaV(DeltaV);
            Show1FoldUpdatedV(UpdatedV);
            Show1FoldUpdatedW(UpdatedW);
            ShowWeightsV();
            ShowWeightsW();
            getTrainingStats();
//            ShowTrainV(wih);
//            ShowTrainW(who);
//            ShowTrainCalc(sum1, hidden, sum, actual,
//                    erro, errh, deltaW, deltaV);
            JOptionPane.showMessageDialog(null, "Finish Training Network!");
        } catch (IOException ex) {
            Logger.getLogger(Backpropagation.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BtnRunMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void TxtLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TxtLoadDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TxtLoadDataActionPerformed

    private void BtnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnRunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BtnRunActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;










                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Backpropagation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Backpropagation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Backpropagation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Backpropagation.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Backpropagation().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBrowse;
    private javax.swing.JButton BtnRun;
    private javax.swing.JTable Tbl1FoldDeltaV;
    private javax.swing.JTable Tbl1FoldDeltaW;
    private javax.swing.JTable Tbl1FoldErrorY;
    private javax.swing.JTable Tbl1FoldErrorZ;
    private javax.swing.JTable Tbl1FoldTestingDataset;
    private javax.swing.JTable Tbl1FoldTrainingDataset;
    private javax.swing.JTable Tbl1FoldUpdatedV;
    private javax.swing.JTable Tbl1FoldUpdatedW;
    private javax.swing.JTable Tbl1FoldY;
    private javax.swing.JTable Tbl1FoldYin;
    private javax.swing.JTable Tbl1FoldZ;
    private javax.swing.JTable Tbl1FoldZin;
    private javax.swing.JTable TblDataset;
    private javax.swing.JTable TblWeightsV;
    private javax.swing.JTable TblWeightsW;
    private javax.swing.JTextArea TxtAreaTesting;
    private javax.swing.JTextField TxtLearningRate;
    private javax.swing.JTextField TxtLoadData;
    private javax.swing.JTextField TxtTrainingCycle;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTabbedPane jTabbedPane9;
    // End of variables declaration//GEN-END:variables
}
